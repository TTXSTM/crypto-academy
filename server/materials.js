const express = require('express');
const db = require('./db');
const multer = require('multer');
const path = require('path');
const router = express.Router();
const fs = require('fs');

const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const dir = path.join(__dirname, 'uploads', 'materials');
    if (!fs.existsSync(dir)) fs.mkdirSync(dir, { recursive: true });
    cb(null, dir);
  },
  filename: (req, file, cb) => {
    cb(null, Date.now() + path.extname(file.originalname));
  }
});
const upload = multer({ storage });

// ========================
// –¢–ï–ì–ò
// ========================

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ —Ç–µ–≥–∏
router.get('/tags', (req, res) => {
  db.all('SELECT * FROM tags', (err, rows) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ç–µ–≥–æ–≤' });
    res.json(rows);
  });
});

// –î–æ–±–∞–≤–∏—Ç—å —Ç–µ–≥ (–æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤)
router.post('/tags', express.json(), (req, res) => {
  const { name } = req.body;
  if (!name) return res.status(400).json({ error: '–ù–∞–∑–≤–∞–Ω–∏–µ —Ç–µ–≥–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ' });

  db.run('INSERT OR IGNORE INTO tags (name) VALUES (?)', [name], function (err) {
    if (err) {
      console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞:', err);
      return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —Ç–µ–≥–∞' });
    }
    if (this.changes === 0) {
      // –£–∂–µ –µ—Å—Ç—å —Ç–∞–∫–æ–π —Ç–µ–≥, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
      db.get('SELECT * FROM tags WHERE name = ?', [name], (err, row) => {
        if (err || !row) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ —Ç–µ–≥–∞' });
        return res.json(row);
      });
    } else {
      res.json({ id: this.lastID, name });
    }
  });
});

// ========================
// –ú–ê–¢–ï–†–ò–ê–õ–´
// ========================

// –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã
router.get('/', async (req, res) => {
  db.all('SELECT * FROM materials ORDER BY id DESC', async (err, rows) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' });
    // –ü–æ–ª—É—á–∞–µ–º –Ω–µ –ø—Ä–æ—Å—Ç–æ id —Ç–µ–≥–æ–≤, –∞ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ { id, name, color }
    for (const row of rows) {
      row.tags = await getMaterialTags(row.id);
    }
    res.json(rows);
  });
});

// –ü–æ–ª—É—á–∏—Ç—å –æ–¥–∏–Ω –º–∞—Ç–µ—Ä–∏–∞–ª
router.get('/:id', (req, res) => {
  const id = req.params.id;
  db.get('SELECT * FROM materials WHERE id = ?', [id], async (err, material) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
    if (!material) return res.status(404).json({ error: '–ú–∞—Ç–µ—Ä–∏–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    material.tags = await getMaterialTags(material.id);
    res.json(material);
  });
});

// –°–æ–∑–¥–∞—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
router.post('/', upload.single('image'), (req, res) => {
  console.log('üì• –ó–∞–ø—Ä–æ—Å –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –ø–æ–ª—É—á–µ–Ω');
  const { title, time, section, difficulty, content, description } = req.body;
  console.log('‚û°Ô∏è –î–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–æ—Ä–º—ã:', { title, time, section, difficulty, content });

  let tags = [];
  try {
    tags = JSON.parse(req.body.tags || '[]');
    console.log('‚úÖ –¢–µ–≥–∏ —Ä–∞—Å–ø–∞—Ä—Å–µ–Ω—ã:', tags);
  } catch (err) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞–∑–±–æ—Ä–µ —Ç–µ–≥–æ–≤:', err);
    return res.status(400).json({ error: '–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ç–µ–≥–æ–≤' });
  }

  const image = req.file ? `/uploads/materials/${req.file.filename}` : '';
  console.log('üñºÔ∏è –ö–∞—Ä—Ç–∏–Ω–∫–∞:', image);

  db.run(
  `INSERT INTO materials (title, time, section, difficulty, content, description, image)
   VALUES (?, ?, ?, ?, ?, ?, ?)`,
  [title, time, section, difficulty, content, description, image],
    function (err) {
      if (err) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Å—Ç–∞–≤–∫–µ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –±–∞–∑—É:', err);
        return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞ –≤ –ë–î' });
      }
      const materialId = this.lastID;
      console.log('‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω, ID:', materialId);

      saveMaterialTags(materialId, tags, () => {
        console.log('‚úÖ –¢–µ–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã');
        res.status(201).json({ id: materialId, message: '–ú–∞—Ç–µ—Ä–∏–∞–ª –¥–æ–±–∞–≤–ª–µ–Ω' });
      });
    }
  );
});

// –û–±–Ω–æ–≤–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
router.put('/:id', upload.single('image'), (req, res) => {
  const id = req.params.id;
  const { title, time, section, difficulty, content, description } = req.body;
  let tags = [];
  try { tags = JSON.parse(req.body.tags || '[]'); } catch {}
  let image = null;
  if (req.file) image = `/uploads/materials/${req.file.filename}`;

  const updateMaterial = () => {
    saveMaterialTags(id, tags, () => {
      res.json({ id, message: '–ú–∞—Ç–µ—Ä–∏–∞–ª –æ–±–Ω–æ–≤–ª—ë–Ω' });
    });
  };

  if (image) {
    db.run(
      `UPDATE materials SET title=?, time=?, section=?, difficulty=?, content=?, description=?, image=? WHERE id=?`,
      [title, time, section, difficulty, content, description, image, id],
      err => {
        if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
        updateMaterial();
      }
    );
  } else {
    db.run(
      `UPDATE materials SET title=?, time=?, section=?, difficulty=?, content=?, description=? WHERE id=?`,
      [title, time, section, difficulty, content, description, id],
      err => {
        if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
        updateMaterial();
      }
    );
  }
});

// –£–¥–∞–ª–∏—Ç—å –º–∞—Ç–µ—Ä–∏–∞–ª
router.delete('/:id', (req, res) => {
  const id = req.params.id;
  db.run('DELETE FROM materials WHERE id = ?', [id], function (err) {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–∞' });
    db.run('DELETE FROM material_tags WHERE material_id = ?', [id], () => {
      res.sendStatus(200);
    });
  });
});

// ========================
// –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï
// ========================

function saveMaterialTags(materialId, tagIds, cb) {
  db.run('DELETE FROM material_tags WHERE material_id = ?', [materialId], () => {
    if (tagIds.length === 0) return cb();
    let done = 0;
    tagIds.forEach(tagId => {
      db.run(
        `INSERT OR IGNORE INTO material_tags (material_id, tag_id) VALUES (?, ?)`,
        [materialId, tagId],
        () => {
          done++;
          if (done === tagIds.length) cb();
        }
      );
    });
  });
}

function getMaterialTags(materialId) {
  return new Promise(resolve => {
    db.all(
      `SELECT tags.id, tags.name, tags.color
       FROM material_tags
       JOIN tags ON material_tags.tag_id = tags.id
       WHERE material_tags.material_id = ?`,
      [materialId],
      (err, rows) => {
        if (err) resolve([]);
        else resolve(rows);
      }
    );
  });
}

router.get('/', (req, res) => {
  db.all('SELECT * FROM materials ORDER BY id DESC', async (err, rows) => {
    if (err) return res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤' });
    for (const row of rows) {
      row.tags = await getMaterialTags(row.id); // –¢–µ–ø–µ—Ä—å –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ —Ç–µ–≥–æ–≤!
    }
    res.json(rows);
  });
});



module.exports = router;
